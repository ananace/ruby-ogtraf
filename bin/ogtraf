#!/usr/bin/env ruby
# frozen_string_literal: true

require 'ogtraf'
require 'time'
require 'thor'

# Implements the OGTraf CLI
class OGTrafCLI < Thor
  class_option :verbose, type: :boolean, default: false, aliases: '-v'

  desc 'journey FROM TO', 'Plans a journey from FROM to TO'
  option :walk, default: false, type: :boolean, desc: 'Is walking allowed?'
  option :num, default: 5, type: :numeric, desc: 'Number of entries wanted',
               aliases: '-n'
  option :time, default: nil, type: :string, desc: 'Date+Time to search from',
                aliases: '-t'
  option :output, default: :text, desc: 'Desired output - text or json',
                  aliases: '-o'

  def journey(from, to)
    OGTraf.debug! if options[:verbose]

    from_s = OGTraf.stops(name: from).first
    to_s = OGTraf.stops(name: to).first
    time = Time.now
    time = Time.parse(options[:date]) if options[:date]

    journies = []
    loop do
      avail = OGTraf.journey(
        from: from,
        to: to,
        date: time,
        span: :after,
        walk: options[:walk]
      )

      avail.each do |j|
        next if j.departure < Time.now

        journies << j
        time = j.departure
      end

      break if journies.size >= options[:num]
    end

    if options[:output].to_sym == :json
      opts = {
        array_nl: "\n",
        object_nl: "\n",
        indent: '  ',
        space: ' '
      }
      puts JSON.generate(journies.take(options[:num]), opts)
    else
      puts "Next #{options[:num]} journeys from #{from_s} to #{to_s} after #{time}:"
      journies.take(options[:num]).each do |j|
        time_left = j.departure - Time.now

        hours = (time_left / 3600).floor
        minutes = ((time_left % 3600) / 60).floor

        puts
        puts "In #{format('%<h>02d:%<m>02d', h: hours, m: minutes)}:" if hours.positive?
        puts "In #{minutes} minutes:" if hours.zero?

        j.connections.each do |c|
          if c.line.walk
            puts format('- (%<dep_t>s - %<arr_t>s) walk to %<stop>s',
                        dep_t: c.departure.strftime('%H:%M'),
                        arr_t: c.arrival.strftime('%H:%M'),
                        stop: c.to.to_s)
          else
            puts format('- (%<dep_t>s - %<arr_t>s) %<line>s from %<from>s to %<to>s',
                        dep_t: c.departure.strftime('%H:%M'),
                        arr_t: c.arrival.strftime('%H:%M'),
                        line: c.line.to_s,
                        from: c.from.to_s,
                        to: c.to.to_s)
          end
        end
      end
    end
  end

  desc 'stop STOP', 'Finds a stop by the given name'
  option :limit, default: 5, type: :numeric, desc: 'Number of entries wanted',
                 aliases: '-l'
  option :output, default: :text, desc: 'Desired output - text or json',
                  aliases: '-o'
  def stop(name)
    OGTraf.debug! if options[:verbose]

    if options[:output].to_sym == :json
      opts = {
        array_nl: "\n",
        object_nl: "\n",
        indent: '  ',
        space: ' '
      }
      puts JSON.generate(OGTraf.stops(name: name).take(options[:limit]), opts)
    else
      puts 'Found stops:'
      puts OGTraf.stops(name: name).take(options[:limit]).map(&:name)
    end
  end
end

OGTrafCLI.start

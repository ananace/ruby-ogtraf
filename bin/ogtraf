#!/usr/bin/env ruby

require 'ogtraf'
require 'time'
require 'thor'

# Implements the OGTraf CLI
class OGTrafCLI < Thor
  class_option :verbose, type: :boolean, default: false, aliases: '-v'

  desc 'journey FROM TO', 'Plans a journey from FROM to TO'
  option :walk, default: false, type: :boolean, desc: 'Is walking allowed?'
  option :num, default: 5, type: :numeric, desc: 'Number of entries wanted',
               aliases: '-n'

  option :time, default: nil, type: :string, desc: 'Date+Time to search from',
                aliases: '-t'

  def journey(from, to)
    from_s = OGTraf.stops(from).first
    to_s = OGTraf.stops(to).first
    time = Time.now
    time = Time.parse(options[:date]) if options[:date]

    puts "Next #{options[:num]} journeys from #{from_s} to #{to_s} after #{time}:"

    shown = 0
    until shown >= options[:num]
      avail = OGTraf.journey(
        from, to,
        date: time,
        span: :after,
        walk: options[:walk],
        verbose: options[:verbose]
      )

      avail.each do |j|
        next if j.departure < Time.now

        time_left = j.departure - Time.now

        hours = (time_left / 3600).floor
        minutes = ((time_left % 3600) / 60).floor

        puts
        puts "In #{format('%02d:%02d', hours, minutes)}:" if hours > 0
        puts "In #{minutes} minutes:" if hours.zero?

        j.connections.each do |c|
          if c.line.walk
            puts format('- (%s - %s) walk to %s',
                        c.departure.strftime('%H:%M'),
                        c.arrival.strftime('%H:%M'),
                        c.to.to_s)
          else
            puts format('- (%s - %s) %s from %s to %s',
                        c.departure.strftime('%H:%M'),
                        c.arrival.strftime('%H:%M'),
                        c.line.to_s,
                        c.from.to_s,
                        c.to.to_s)
          end
        end

        shown += 1
        break if shown >= options[:num]

        time = j.departure
      end
    end
  end

  desc 'stop STOP', 'Finds a stop by the given name'
  option :limit, default: 5, type: :numeric, desc: 'Number of entries wanted',
                 aliases: '-l'
  def stop(name)
    puts 'Found stops:'
    puts OGTraf.stops(
      name,
      verbose: options[:verbose]
    ).take(options[:limit]).map(&:name)
  end
end

OGTrafCLI.start
